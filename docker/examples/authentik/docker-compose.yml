# Example: Authentik SSO with Auto Certificate Management
version: '3.8'

services:
  # PostgreSQL for Authentik
  authentik-db:
    image: postgres:15-alpine
    container_name: authentik-db
    environment:
      - POSTGRES_DB=authentik
      - POSTGRES_USER=authentik
      - POSTGRES_PASSWORD=${AUTHENTIK_DB_PASSWORD}
    volumes:
      - authentik_db:/var/lib/postgresql/data
    networks:
      - authentik-network
    restart: unless-stopped

  # Redis for Authentik
  authentik-redis:
    image: redis:alpine
    container_name: authentik-redis
    command: --save 60 1 --loglevel warning
    volumes:
      - authentik_redis:/data
    networks:
      - authentik-network
    restart: unless-stopped

  # Authentik Server
  authentik-server:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik-server
    ports:
      - "9000:9000"
      - "9443:9443"
    environment:
      # Database
      - AUTHENTIK_POSTGRESQL__HOST=authentik-db
      - AUTHENTIK_POSTGRESQL__NAME=authentik
      - AUTHENTIK_POSTGRESQL__USER=authentik
      - AUTHENTIK_POSTGRESQL__PASSWORD=${AUTHENTIK_DB_PASSWORD}

      # Redis
      - AUTHENTIK_REDIS__HOST=authentik-redis

      # HTTPS with auto-managed certificates
      - AUTHENTIK_WEB__HTTPS=true
      - AUTHENTIK_WEB__TLS_CERT=/certs/authentik.crt
      - AUTHENTIK_WEB__TLS_KEY=/certs/authentik.key

      # Basic settings
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
      - AUTHENTIK_ERROR_REPORTING__ENABLED=false
    volumes:
      # Auto-managed certificates (read-only)
      - authentik_certs:/certs:ro
      - authentik_media:/media
      - authentik_templates:/templates
    depends_on:
      - authentik-db
      - authentik-redis
      - authentik-cert-manager
    networks:
      - authentik-network
    restart: unless-stopped

  # Authentik Worker
  authentik-worker:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik-worker
    command: worker
    environment:
      - AUTHENTIK_POSTGRESQL__HOST=authentik-db
      - AUTHENTIK_POSTGRESQL__NAME=authentik
      - AUTHENTIK_POSTGRESQL__USER=authentik
      - AUTHENTIK_POSTGRESQL__PASSWORD=${AUTHENTIK_DB_PASSWORD}
      - AUTHENTIK_REDIS__HOST=authentik-redis
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
    volumes:
      - authentik_media:/media
      - authentik_templates:/templates
    depends_on:
      - authentik-db
      - authentik-redis
    networks:
      - authentik-network
    restart: unless-stopped

  # Certificate manager for Authentik
  authentik-cert-manager:
    image: ${DIMENSION_BRIDGE_IMAGE:-dimension-bridge:v1.0.0}
    container_name: authentik-cert-manager
    environment:
      # Service configuration
      - SERVER_IP=auth.mycompany.com
      - SERVICE_NAME=authentik
      - CERT_DIR=/certs
      - LOG_DIR=/logs

      # Certificate settings
      - CHECK_INTERVAL=86400
      - DAYS_BEFORE_RENEWAL=7
      - CERT_VALIDITY_DAYS=30

      # Step CA configuration
      - STEP_CA_URL=https://ca.mycompany.com:9000
      - STEP_CA_FINGERPRINT=${STEP_CA_FINGERPRINT}

      # Restart Authentik when certificate is renewed
      - RELOAD_COMMAND=docker restart authentik-server authentik-worker

      # Notifications
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
      - RUST_LOG=info
    volumes:
      # Certificate storage (shared with authentik)
      - authentik_certs:/certs
      - authentik_logs:/logs

      # Docker socket for service restart
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - authentik-network
    restart: unless-stopped

volumes:
  authentik_db:
    driver: local
  authentik_redis:
    driver: local
  authentik_media:
    driver: local
  authentik_templates:
    driver: local
  authentik_certs:
    driver: local
  authentik_logs:
    driver: local

networks:
  authentik-network:
    driver: bridge
