version: '3.8'

# Example: Multiple services with shared cert-agent
services:
  # API Gateway (Nginx)
  api-gateway:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - shared_certs:/etc/ssl/certs:ro
      - ./gateway-nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - shared-cert-agent
      - api-service
    networks:
      - app-network
    restart: unless-stopped

  # Backend API Service
  api-service:
    image: node:18-alpine
    container_name: api-service
    working_dir: /app
    environment:
      - NODE_ENV=production
      - HTTPS_CERT=/certs/api.company.internal.crt
      - HTTPS_KEY=/certs/api.company.internal.key
      - PORT=3000
    volumes:
      - shared_certs:/certs:ro
      - ./api-app:/app:ro
    command: ["node", "server.js"]
    depends_on:
      - shared-cert-agent
      - api-db
    networks:
      - app-network
    restart: unless-stopped

  # Database
  api-db:
    image: postgres:15-alpine
    container_name: api-db
    environment:
      - POSTGRES_DB=apidb
      - POSTGRES_USER=apiuser
      - POSTGRES_PASSWORD=${API_DB_PASSWORD}
    volumes:
      - api_db_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SERVER_PROTOCOL=https
      - GF_SERVER_CERT_FILE=/certs/grafana.company.internal.crt
      - GF_SERVER_CERT_KEY=/certs/grafana.company.internal.key
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - shared_certs:/certs:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - shared-cert-agent
    networks:
      - app-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - shared_certs:/certs:ro
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    depends_on:
      - shared-cert-agent
    networks:
      - app-network
    restart: unless-stopped

  # Shared certificate agent for all services
  shared-cert-agent:
    image: appleparan/cert-agent:latest
    container_name: shared-cert-agent
    environment:
      # Multiple domains for all services
      - CERT_DOMAINS=gateway.company.internal,api.company.internal,grafana.company.internal,prometheus.company.internal
      - STEP_CA_URL=https://ca.company.internal:9000
      - SERVICE_NAME=shared-services

      # Complex reload command for multiple services
      - RELOAD_COMMAND=docker exec api-gateway nginx -s reload && docker restart api-service && docker restart grafana && docker restart prometheus

      # Renewal settings
      - RENEWAL_DAYS=7
      - CHECK_INTERVAL=6h
      - CERT_VALIDITY=30d

      # Step CA authentication
      - STEP_CA_PROVISIONER=acme

      # Notification settings
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
    volumes:
      # Certificate storage (read-write)
      - shared_certs:/certs:rw

      # Docker socket for service management
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - app-network
      - cert-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Certificate monitoring dashboard
  cert-monitor:
    image: appleparan/cert-monitor:latest
    container_name: cert-monitor
    ports:
      - "8080:8080"
    environment:
      - MONITOR_CERTS_PATH=/certs
      - STEP_CA_URL=https://ca.company.internal:9000
    volumes:
      - shared_certs:/certs:ro
    depends_on:
      - shared-cert-agent
    networks:
      - app-network
    restart: unless-stopped

volumes:
  shared_certs:
    driver: local
  api_db_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  app-network:
    driver: bridge
  cert-network:
    external: true
